COMMAND STRUCTURE:

The AWS CLI uses a multipart structure on the command line that must be specified in this order:

The base call to the aws program.

The top-level command, which typically corresponds to an AWS service supported by the AWS CLI.

The subcommand that specifies which operation to perform.

General AWS CLI options or parameters required by the operation. You can specify these in any order as long as they follow the first three parts. 
If an exclusive parameter is specified multiple times, only the last value applies.

$ aws <command> <subcommand> [options and parameters]

Parameters can take various types of input values, such as numbers, strings, lists, maps, and JSON structures. What is supported is dependent upon the command and 
subcommand you specify.

EXAMPLE

Amazon S3
The following example lists all of your Amazon S3 buckets.
$ aws s3 ls



WAIT COMMANDS:

Some AWS services have wait commands available. Any command that uses aws wait usually waits until a command is complete before it moves on to the next step. 
This is especially useful for multipart commands or scripting, as you can use a wait command to prevent moving to subsequent steps if the wait command fails.

The AWS CLI uses a multipart structure on the command line for the wait command that must be specified in this order:

The base call to the aws program.

The top-level command, which typically corresponds to an AWS service supported by the AWS CLI.

The wait command.

The subcommand that specifies which operation to perform.

General CLI options or parameters required by the operation. You can specify these in any order as long as they follow the first three parts. 
If an exclusive parameter is specified multiple times, only the last value applies.

$ aws <command> wait <subcommand> [options and parameters]

Parameters can take various types of input values, such as numbers, strings, lists, maps, and JSON structures. What is supported is dependent upon the command 
and subcommand you specify.

Example
aws cloudformation wait stack-create-complete --stack-name myStackName

